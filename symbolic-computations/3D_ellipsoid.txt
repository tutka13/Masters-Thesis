load(vect);
/*najprv zmena bazy*/
tangency: [diff(m_1(t), t), diff(m_2(t), t), diff(m_3(t), t)]$
t_normalized: tangency / sqrt(tangency . tangency)$
TANGENT: ratsimp(t_normalized);

normal: [0, -t_normalized[3], t_normalized[2]]$
n_normalized: normal / sqrt(normal . normal)$
NORMAL: ratsimp(n_normalized);

binormal: [TANGENT[2]*NORMAL[3] - TANGENT[3]*NORMAL[2],
    TANGENT[3]*NORMAL[1] - TANGENT[1]*NORMAL[3],
    TANGENT[1]*NORMAL[2] - TANGENT[2]*NORMAL[1]]$

b_normalized: binormal / sqrt(binormal . binormal)$
BINORMAL: ratsimp(b_normalized);

P: matrix(
 [TANGENT[1],TANGENT[2],TANGENT[3]], 
 [NORMAL[1],NORMAL[2],NORMAL[3]], 
 [BINORMAL[1],BINORMAL[2],BINORMAL[3]]
)$

curve: [x-m_1(t), y-m_2(t), z-m_3(t)]$
U: ratsimp(P.curve)$

u: ratsimp(U[1]^2/a^2)$
v: ratsimp(U[2]^2/b^2)$
w: ratsimp(U[3]^2/b^2)$

ellipsoid: ratsimp(u+v+w-1)$
expr: expand(ellipsoid)$

/*potrebujeme koeficienty elipsoidu v novej baze*/
A: ratsimp(coeff(expr, x, 2));
B: ratsimp(coeff(expr, y, 2));
C: ratsimp(coeff(expr, z, 2));

/*take koeficienty, kde je x^1*/
x1: coeff(expr, x, 1)$
D: ratsimp(coeff(x1, y, 1));
E: ratsimp(coeff(x1, z, 1));

y1: coeff(expr, y, 1)$
F: ratsimp(coeff(y1, z, 1));

z1: coeff(expr, z, 1)$

/*take koeficienty, kde bolo x*/
x0: coeff(expr, x, 0)$
/*take koeficienty, kde bolo x a y*/
x0y0: coeff(x0, y, 0)$
J: ratsimp(coeff(x0y0, z, 0));
 
y0: coeff(expr, y, 0)$
z0: coeff(expr, z, 0)$

x1y0: coeff(x1, y, 0)$
G: ratsimp(coeff(x1y0, z, 0));

y1x0: coeff(y1, x, 0)$
H: ratsimp(coeff(y1x0, z, 0));

z1x0: coeff(z1, x, 0)$
I: ratsimp(coeff(z1x0, y, 0));

M: matrix(
 [A, D/2, E/2, G/2], 
 [D/2, B, F/2, H/2], 
 [E/2, F/2, C, I/2],
 [G/2, H/2, I/2, J]
)$

/*tieto koeficienty derivujeme*/
A1: diff(A,t,1); 
B1: diff(B,t,1);
C1: diff(C,t,1);
D1: diff(D,t,1);
E1: diff(E,t,1);
F1: diff(F,t,1);
G1: diff(G,t,1);
H1: diff(H,t,1);
I1: diff(I,t,1);
J1: diff(J,t,1);

M1: matrix(
 [A1, D1/2, E1/2, G1/2], 
 [D1/2, B1, F1/2, H1/2], 
 [E1/2, F1/2, C1, I1/2],
 [G1/2, H1/2, I1/2, J1]
)$

/*zistime, o aky typ plochy ide pomocou invariantov*/
DELTA: ratsimp(determinant(M1));
is(DELTA = [0]);

DELTA_44: ratsimp(determinant(matrix(
 [A1, D1/2, E1/2], 
 [D1/2, B1, F1/2], 
 [E1/2, F1/2, C1]
)))$
is(DELTA_44 = [0]); 

T: ratsimp(A1*B1 - D1^2/4 + B1*C1 - F1^2/4 + C1*A1 - E1^2/4);
is(T = [0]);

DELTA_11: ratsimp(determinant(matrix(
 [B1, F1/2, H1/2], 
 [F1/2, C1, I1/2],
 [H1/2, I1/2, J1]
)))$

DELTA_22: ratsimp(determinant(matrix(
 [A1, E1/2, G1/2], 
 [E1/2, C1, I1/2],
 [G1/2, I1/2, J1]
)))$

DELTA_33: ratsimp(determinant(matrix(
 [A1, D1/2, G1/2], 
 [D1/2, B1, H1/2], 
 [G1/2, H1/2, J1]
)))$

S: ratsimp(DELTA_11 + DELTA_22 + DELTA_33);
is(S = [0]);

/*plocha je vzdy realna a pretina krivku v parametri t*/
quadric: A1*x^2+B1*y^2+C1*z^2+D1*x*y+E1*x*z+F1*y*z+G1*x+H1*y+I1*z+J1$
substituted_quadric: ratsimp(subst([x = m_1(t), y = m_2(t), z=m_3(t)], quadric));
is(substituted_quadric=[0]);

/*zistujeme vyjadrenie roviny XI*/
alfa: ratsimp(A1/diff(m_1(t), t));
beta: ratsimp(B1/diff(m_2(t), t));
gama: ratsimp(C1/diff(m_3(t), t));

c: m_1(t)*diff(m_1(t), t)+m_2(t)*diff(m_2(t), t)+m_3(t)*diff(m_3(t), t);
delta: ratsimp(-J1/c);

d: ratsimp(diff(m_1(t), t)*beta-diff(m_2(t), t)*alfa);
e: ratsimp(diff(m_1(t), t)*gama-diff(m_3(t), t)*alfa);
f: ratsimp(diff(m_2(t), t)*gama-diff(m_3(t), t)*beta);

/*kontrola, ci sme nasli spravnu delta funkciu*/
delta_d: ratsimp((G1 + c*alfa)/diff(m_1(t),t));
delta_e: ratsimp((H1 + c*beta)/diff(m_2(t),t));
delta_f: ratsimp((I1 + c*gama)/diff(m_3(t),t));

q: ratsimp(-m_1(t)*alfa-m_2(t)*beta-m_3(t)*gama-2/a^2);
is(delta=q);